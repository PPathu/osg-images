name: Main Workflow

on:
  push:
    branches:
      - main
      - testing-branch
  pull_request:
  workflow_dispatch:
  repository_dispatch:
    types: [dispatch-build]

jobs:
  make-date-tag:
    runs-on: ubuntu-latest
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}
    steps:
      - name: make date tag
        id: mkdatetag
        run: echo "dtag=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT

  build-image-list:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.image-list.outputs.json }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: image-list
        run: |
          ORG_DIR=opensciencegrid
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]] ||
             [[ $GITHUB_EVENT_NAME == 'push' ]]; then
               if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
                   BASE=$(git merge-base origin/$GITHUB_BASE_REF HEAD)
               elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
                   BASE=${{github.event.before}}
               else
                   BASE=origin/main
               fi
               images=$(git diff --name-only \
                                 "$BASE" \
                                 "$GITHUB_SHA" |
                        egrep "^$ORG_DIR/" |
                        cut -d/ -f -2 |
                        sort |
                        uniq |
                        xargs -I {} find . -type d \
                                           -wholename ./{} \
                                           -printf "%P\n")
          else
               images=$(find $ORG_DIR -mindepth 1 \
                                      -maxdepth 1 \
                                      -type d \
                                      -printf "$ORG_DIR/%P\n")
          fi
          image_json=$(echo -n "${images:-dummy}" | jq -Rcs '.|split("\n")')
          echo "json=$image_json" >> $GITHUB_OUTPUT

  check-config:
    runs-on: ubuntu-latest
    needs: [make-date-tag, build-image-list]
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.build-image-list.outputs.images) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for build-config.json in ${{ matrix.image }}
        id: check-jsonfile
        run: |
          if [ -f "${{ matrix.image }}/build-config.json" ]; then
            echo "build-config.json exists in ${{ matrix.image }}"
            echo "config_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No build-config.json found in ${{ matrix.image }}"
            echo "config_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Read build-config.json in ${{ matrix.image }}
        id: read-config
        if: steps.check-jsonfile.outputs.config_exists == 'true'
        run: |
          config=$(cat ${{ matrix.image }}/build-config.json)
          standard_enabled=$(echo $config | jq -r '.standard_build.enabled')
          repo_enabled=$(echo $config | jq -r '.repo_build.enabled')
          base_name_standard=$(echo $config | jq -r '.standard_build.base_os.base_name | join(",")')
          base_version_standard=$(echo $config | jq -r '.standard_build.base_os.base_version | join(",")')
          base_repo_standard=$(echo $config | jq -r '.standard_build.base_repo')
          base_name_repo=$(echo $config | jq -r '.repo_build.base_os.base_name | join(",")')
          base_version_repo=$(echo $config | jq -r '.repo_build.base_os.base_version | join(",")')
          base_repo_repo=$(echo $config | jq -r '.repo_build.base_repo')

          echo "standard_enabled=$standard_enabled" >> $GITHUB_OUTPUT
          echo "repo_enabled=$repo_enabled" >> $GITHUB_OUTPUT
          echo "base_name_standard=$base_name_standard" >> $GITHUB_OUTPUT
          echo "base_version_standard=$base_version_standard" >> $GITHUB_OUTPUT
          echo "base_repo_standard=$base_repo_standard" >> $GITHUB_OUTPUT
          echo "base_name_repo=$base_name_repo" >> $GITHUB_OUTPUT
          echo "base_version_repo=$base_version_repo" >> $GITHUB_OUTPUT
          echo "base_repo_repo=$base_repo_repo" >> $GITHUB_OUTPUT

          if [[ "$standard_enabled" == "true" ]]; then
            echo "standard_enabled=true" >> $GITHUB_OUTPUT
            for base_name in $(echo $base_name_standard | tr "," "\n"); do
              for base_version in $(echo $base_version_standard | tr "," "\n"); do
                echo "{ \"image\": \"${{ matrix.image }}\", \"base_name\": \"$base_name\", \"base_version\": \"$base_version\", \"base_repo\": \"$base_repo_standard\", \"build_type\": \"standard\" }" >> matrix.json
              done
            done
          else
            echo "standard_enabled=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$repo_enabled" == "true" ]]; then
            echo "repo_enabled=true" >> $GITHUB_OUTPUT
            for base_name in $(echo $base_name_repo | tr "," "\n"); do
              for base_version in $(echo $base_version_repo | tr "," "\n"); do
                echo "{ \"image\": \"${{ matrix.image }}\", \"base_name\": \"$base_name\", \"base_version\": \"$base_version\", \"base_repo\": \"$base_repo_repo\", \"build_type\": \"repo\" }" >> matrix.json
              done
            done
          else
            echo "repo_enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Set default values if build-config.json is missing
        if: steps.check-jsonfile.outputs.config_exists == 'false'
        run: |
          echo "standard_enabled=true" >> $GITHUB_OUTPUT
          echo "repo_enabled=true" >> $GITHUB_OUTPUT
          echo "[{ \"image\": \"${{ matrix.image }}\", \"base_name\": \"el9\", \"base_version\": \"23\", \"base_repo\": \"testing\", \"build_type\": \"standard\" },
                { \"image\": \"${{ matrix.image }}\", \"base_name\": \"el9\", \"base_version\": \"23\", \"base_repo\": \"testing\", \"build_type\": \"repo\" }]" >> matrix.json

      - name: Debug matrix.json
        run: cat matrix.json

      - name: Create build matrix
        id: create-matrix
        run: |
          matrix=$(jq -c -s 'add' matrix.json)
          echo "image_matrix=$matrix" >> $GITHUB_OUTPUT

      - name: Trigger standard build workflow
        if: ${{ steps.check-jsonfile.outputs.config_exists == 'false' || steps.read-config.outputs.standard_enabled == 'true' }}
        uses: actions/github-script@v4
        with:
          script: |
            const imageMatrix = ${{ needs.check-config.outputs.image_matrix }};
            imageMatrix.forEach(config => {
              if (config.build_type === "standard") {
                const result = await github.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'standard-build.yml',
                  ref: context.ref,
                  inputs: {
                    image: config.image,
                    base_name: config.base_name,
                    base_version: config.base_version,
                    base_repo: config.base_repo
                  }
                });
                console.log(result);
              }
            });

      - name: Trigger repo build workflow
        if: ${{ steps.check-jsonfile.outputs.config_exists == 'false' || steps.read-config.outputs.repo_enabled == 'true' }}
        uses: actions/github-script@v4
        with:
          script: |
            const imageMatrix = ${{ needs.check-config.outputs.image_matrix }};
            imageMatrix.forEach(config => {
              if (config.build_type === "repo") {
                const result = await github.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'repo-build.yml',
                  ref: context.ref,
                  inputs: {
                    image: config.image,
                    base_name: config.base_name,
                    base_version: config.base_version,
                    base_repo: config.base_repo
                  }
                });
                console.log(result);
              }
            });

