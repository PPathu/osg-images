# Name of the workflow
name: Build and push container images

# Events that trigger the workflow
on:
  push:
    branches:
      - main  # Trigger on push to the main branch
      - testing-branch  # Trigger on push to the testing-branch
  pull_request:  # Trigger on pull requests
  workflow_dispatch:  # Manual trigger from GitHub UI
  repository_dispatch:
    types: [dispatch-build]  # Trigger on custom repository dispatch events of type 'dispatch-build'

# Jobs to be executed
jobs:
  make-date-tag:
    runs-on: ubuntu-latest  # Job runs on the latest version of Ubuntu
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}  # Output variable 'dtag' from the step 'mkdatetag'
    steps:
      - name: make date tag  # Name of the step
        id: mkdatetag  # ID of the step
        run: echo "dtag=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT  # Command to generate a date tag and set it as output

  build-image-list:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.image-list.outputs.json }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: image-list
        run: |
          ORG_DIR=opensciencegrid
          # Get the list of files changed based on the type of event
          # kicking off the GHA:
          # 1. For the main branch, diff the previous state of main vs
          #    the current commit
          # 2. For other branches (i.e., on someone's fork), diff main
          #    vs the current commit
          # 3. For PRs, diff the base ref vs the current commit
          # 4. For everything else (e.g., dispatches), build all images
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]] ||
             [[ $GITHUB_EVENT_NAME == 'push' ]]; then
               if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
                   BASE=$(git merge-base origin/$GITHUB_BASE_REF HEAD)
               elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
                   BASE=${{github.event.before}}
               else
                   BASE=origin/main
               fi
               # List image root dirs where files have changed and the
               # root dir exists. Example value:
               # "opensciencegrid/vo-frontend opensciencegrid/ospool-cm"
               images=$(git diff --name-only \
                                 "$BASE" \
                                 "$GITHUB_SHA" |
                        egrep "^$ORG_DIR/" |
                        cut -d/ -f -2 |
                        sort |
                        uniq |
                        xargs -I {} find . -type d \
                                           -wholename ./{} \
                                           -printf "%P\n")
          else
               # List all image root dirs. Example value:
               # "opensciencegrid/vo-frontend opensciencegrid/ospool-cm"
               images=$(find $ORG_DIR -mindepth 1 \
                                      -maxdepth 1 \
                                      -type d \
                                      -printf "$ORG_DIR/%P\n")
          fi

          # Ensure that the generated JSON array has a member,
          # otherwise GHA will throw an error about an empty matrix
          # vector in subsequent steps
          image_json=$(echo -n "${images:-dummy}" | jq -Rcs '.|split("\n")')
          echo "json=$image_json" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest  # Job runs on the latest version of Ubuntu
    needs: build-image-list  # Job depends on 'build-image-list' job
    if: needs.build-image-list.outputs.images != '["dummy"]'  # Only run if there are valid images to build
    continue-on-error: true  # Continue even if there are errors
    strategy:
      fail-fast: false  # Do not stop all jobs if one job fails
      matrix:
        image: ${{ fromJson(needs.build-image-list.outputs.images) }}  # Matrix of images to build
        yum_repo: ['development', 'testing', 'release']  # Matrix of yum repositories
        series:
          - name: '3.6'
            os: 'el7'
          - name: '23'
            os: 'el9'
    steps:
      - name: Build ${{ matrix.image }}:${{ matrix.series }}-${{ matrix.yum_repo }}  # Step to build the image
        continue-on-error: ${{ matrix.yum_repo == 'development' }}  # Continue on error only for 'development' repo
        uses: opensciencegrid/build-container-action@v0.6.0  # Use the build-container-action from Open Science Grid
        with:
          osg_series: ${{ matrix.series.name }}  # OSG series name
          osg_repo: ${{ matrix.yum_repo }}  # Yum repository
          context: ${{ matrix.image }}  # Build context (image directory)
          base_os: ${{ matrix.series.os }}  # Base operating system

  push:
    runs-on: ubuntu-latest # Job runs on the latest version of Ubuntu
    if: >-
      github.ref == 'refs/heads/main' && 
      github.event_name != 'pull_request' && 
      github.repository_owner == 'PPathu' &&
      needs.build-image-list.outputs.images != '["dummy"]'
    needs: [make-date-tag, build-image-list, build]
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.build-image-list.outputs.images) }}
        series:
          - name: '3.6'
            os: 'el7'
          - name: '23'
            os: 'el9'
    steps:
      - name: Push to Harbor (${{ matrix.series }}-development)  # Step to push to Harbor development repo
        if: matrix.series.name != '23'  # Skip if the series name is '23'
        uses: opensciencegrid/push-container-action@main  # Use the push-container-action from Open Science Grid
        with:
          repo: development  # Push to the development repository
          osg_series: ${{ matrix.series.name }}  # OSG series name
          context: ${{ matrix.image }}  # Image context
          base_os: ${{ matrix.series.os }}  # Base operating system
          registry_url: hub.opensciencegrid.org  # Harbor registry URL
          registry_user: ${{ secrets.OSG_HARBOR_ROBOT_USER }}  # Harbor registry user from secrets
          registry_pass: ${{ secrets.OSG_HARBOR_ROBOT_PASSWORD }}  # Harbor registry password from secrets

      - name: Push to Harbor (${{ matrix.series.name }}-testing)  # Step to push to Harbor testing repo
        if: always()  # Always run this step
        uses: opensciencegrid/push-container-action@main  # Use the push-container-action from Open Science Grid
        with:
          repo: testing  # Push to the testing repository
          osg_series: ${{ matrix.series.name }}  # OSG series name
          context: ${{ matrix.image }}  # Image context
          base_os: ${{ matrix.series.os }}  # Base operating system
          registry_url: hub.opensciencegrid.org  # Harbor registry URL
          registry_user: ${{ secrets.OSG_HARBOR_ROBOT_USER }}  # Harbor registry user from secrets
          registry_pass: ${{ secrets.OSG_HARBOR_ROBOT_PASSWORD }}  # Harbor registry password from secrets

      - name: Push to Harbor (${{ matrix.series.name }}-release)  # Step to push to Harbor release repo
        if: always()  # Always run this step
        uses: opensciencegrid/push-container-action@main  # Use the push-container-action from Open Science Grid
        with:
          repo: release  # Push to the release repository
          osg_series: ${{ matrix.series.name }}  # OSG series name
          context: ${{ matrix.image }}  # Image context
          base_os: ${{ matrix.series.os }}  # Base operating system
          registry_url: hub.opensciencegrid.org  # Harbor registry URL
          registry_user: ${{ secrets.OSG_HARBOR_ROBOT_USER }}  # Harbor registry user from secrets
          registry_pass: ${{ secrets.OSG_HARBOR_ROBOT_PASSWORD }}  # Harbor registry password from secrets

      - name: Push to Docker Hub (${{ matrix.series.name }}-development)  # Step to push to Docker Hub development repo
        if: always()  # Always run this step
        uses: opensciencegrid/push-container-action@main  # Use the push-container-action from Open Science Grid
        with:
          repo: development  # Push to the development repository
          osg_series: ${{ matrix.series.name }}  # OSG series name
          context: ${{ matrix.image }}  # Image context
          base_os: ${{ matrix.series.os }}  # Base operating system
          registry_url: docker.io  # Docker Hub registry URL
          registry_user: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub registry user from secrets
          registry_pass: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub registry password from secrets

      - name: Push to Docker Hub (${{ matrix.series.name }}-testing)  # Step to push to Docker Hub testing repo
        if: always()  # Always run this step
        uses: opensciencegrid/push-container-action@main  # Use the push-container-action from Open Science Grid
        with:
          repo: testing  # Push to the testing repository
          osg_series: ${{ matrix.series.name }}  # OSG series name
          context: ${{ matrix.image }}  # Image context
          base_os: ${{ matrix.series.os }}  # Base operating system
          registry_url: docker.io  # Docker Hub registry URL
          registry_user: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub registry user from secrets
          registry_pass: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub registry password from secrets

      - name: Push to Docker Hub (${{ matrix.series.name }}-release)  # Step to push to Docker Hub release repo
        if: always()  # Always run this step
        uses: opensciencegrid/push-container-action@main  # Use the push-container-action from Open Science Grid
        with:
          repo: release  # Push to the release repository
          osg_series: ${{ matrix.series.name }}  # OSG series name
          context: ${{ matrix.image }}  # Image context
          base_os: ${{ matrix.series.os }}  # Base operating system
          registry_url: docker.io  # Docker Hub registry URL
          registry_user: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub registry user from secrets
          registry_pass: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub registry password from secrets
